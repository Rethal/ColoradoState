import java.util.ArrayList;
import java.util.Scanner;

public class In2Post {

        // This class implements the infix to postfix translation

	// Use expQueu to create the postfix expression
	// enque at the end of the queue
	// deque at the front of the queue
	private Queue expQueue;

	// opStack maintains operators
	private Stack opStack;

	// when scanning a next Token, put it in nextToken
	private String nextToken;

	// scLine is the scanner that gets the input line in the constructor
	private TokenIter tokIt;

	public In2Post(String line, boolean debug){
		tokIt = new TokenIter(line);
		opStack  = new Stack(debug);
		expQueue = new Queue(debug);
		System.out.println("line: " + line);
	}


        // Convert infix to a String postfix, using expQueue and opStack.
        // The workings of In2Post are described in the Queue (L4) lecture notes,
        // and in Prichard Section 7.4 
	public String convertIn2Post() throws StackException, QueueException{
	    return "1";
        }


	public static void main(String[] args) throws StackException, QueueException{
		// exercise with increasingly complex expressions
		boolean db = false;
		In2Post ex1 = new In2Post("1", db);
		System.out.println(ex1.convertIn2Post());
		In2Post ex2 = new In2Post("1+2", db);
	}
}
